apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasource
  namespace: expense-tracker-monitoring
  labels:
    app: grafana
    component: monitoring
data:
  datasource.yaml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        uid: prometheus-uid
        access: proxy
        url: http://prometheus-service:9090
        isDefault: true
        editable: true
        basicAuth: false
        jsonData:
          timeInterval: "15s"
          queryTimeout: "60s"
          httpMethod: "POST"
        secureJsonData: {}
        version: 1
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboard-provider
  namespace: expense-tracker-monitoring
  labels:
    app: grafana
    component: monitoring
data:
  dashboards.yaml: |
    apiVersion: 1
    providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        updateIntervalSeconds: 10
        allowUiUpdates: true
        options:
          path: /var/lib/grafana/dashboards
---
apiVersion: v1
kind: Secret
metadata:
  name: grafana-credentials
  namespace: expense-tracker-monitoring
  labels:
    app: grafana
    component: monitoring
type: Opaque
data:
  admin-user: YWRtaW4=  # admin (base64)
  admin-password: YWRtaW4xMjM=  # admin123 (base64)
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: expense-tracker-monitoring
  labels:
    app: grafana
    component: monitoring
    version: v10.2.2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
      component: monitoring
  template:
    metadata:
      labels:
        app: grafana
        component: monitoring
        version: v10.2.2
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 472
        fsGroup: 472
      containers:
      - name: grafana
        image: grafana/grafana:10.2.2
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        env:
        - name: GF_SECURITY_ADMIN_USER
          valueFrom:
            secretKeyRef:
              name: grafana-credentials
              key: admin-user
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-credentials
              key: admin-password
        - name: GF_USERS_ALLOW_SIGN_UP
          value: "false"
        - name: GF_INSTALL_PLUGINS
          value: "grafana-piechart-panel,grafana-worldmap-panel"
        - name: GF_PATHS_DATA
          value: "/var/lib/grafana"
        - name: GF_PATHS_LOGS
          value: "/var/log/grafana"
        - name: GF_PATHS_PLUGINS
          value: "/var/lib/grafana/plugins"
        - name: GF_PATHS_PROVISIONING
          value: "/etc/grafana/provisioning"
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: grafana-datasource
          mountPath: /etc/grafana/provisioning/datasources
          readOnly: true
        - name: grafana-dashboard-provider
          mountPath: /etc/grafana/provisioning/dashboards
          readOnly: true
        - name: grafana-dashboards
          mountPath: /var/lib/grafana/dashboards
          readOnly: true
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          timeoutSeconds: 30
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 5
          timeoutSeconds: 5
      volumes:
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-pvc
      - name: grafana-datasource
        configMap:
          name: grafana-datasource
      - name: grafana-dashboard-provider
        configMap:
          name: grafana-dashboard-provider
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards
      restartPolicy: Always
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: expense-tracker-monitoring
  labels:
    app: grafana
    component: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: standard
---
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: expense-tracker-monitoring
  labels:
    app: grafana
    component: monitoring
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app: grafana
    component: monitoring
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: expense-tracker-monitoring
  labels:
    app: grafana
    component: monitoring
data:
  expense-tracker-dashboard.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Expense Tracker Kubernetes Dashboard",
        "tags": ["expense-tracker", "kubernetes", "monitoring"],
        "style": "dark",
        "timezone": "browser",
        "refresh": "30s",
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "panels": [
          {
            "id": 1,
            "title": "Service Status",
            "type": "stat",
            "targets": [
              {
                "expr": "up{job=\"expense-tracker-backend\"}",
                "legendFormat": "Backend"
              },
              {
                "expr": "up{job=\"expense-tracker-frontend\"}",
                "legendFormat": "Frontend"
              },
              {
                "expr": "up{job=\"prometheus\"}",
                "legendFormat": "Prometheus"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "thresholds"
                },
                "mappings": [
                  {
                    "options": {
                      "0": {"text": "DOWN", "color": "red"},
                      "1": {"text": "UP", "color": "green"}
                    },
                    "type": "value"
                  }
                ],
                "thresholds": {
                  "steps": [
                    {"color": "red", "value": null},
                    {"color": "green", "value": 1}
                  ]
                }
              }
            },
            "gridPos": {"h": 8, "w": 24, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "Pod Resource Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(container_cpu_usage_seconds_total{namespace=\"expense-tracker\"}[5m])",
                "legendFormat": "{{pod}} CPU"
              },
              {
                "expr": "container_memory_usage_bytes{namespace=\"expense-tracker\"} / 1024 / 1024",
                "legendFormat": "{{pod}} Memory (MB)"
              }
            ],
            "yAxes": [{"label": "Usage"}],
            "gridPos": {"h": 8, "w": 24, "x": 0, "y": 8}
          }
        ]
      }
    } 