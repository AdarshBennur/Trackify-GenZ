apiVersion: v1
kind: ConfigMap
metadata:
  name: sonarqube-config
  namespace: expense-tracker
  labels:
    app: sonarqube
    component: code-quality
data:
  sonar.properties: |
    sonar.es.bootstrap.checks.disable=true
    sonar.log.level=INFO
    sonar.path.logs=/opt/sonarqube/logs
    sonar.path.data=/opt/sonarqube/data
    sonar.path.temp=/opt/sonarqube/temp
---
apiVersion: v1
kind: Secret
metadata:
  name: sonarqube-db-credentials
  namespace: expense-tracker
  labels:
    app: sonarqube
    component: code-quality
type: Opaque
data:
  username: c29uYXI=  # sonar (base64)
  password: c29uYXIxMjM=  # sonar123 (base64)
  database: c29uYXI=  # sonar (base64)
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sonarqube-db
  namespace: expense-tracker
  labels:
    app: sonarqube-db
    component: code-quality
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sonarqube-db
      component: code-quality
  template:
    metadata:
      labels:
        app: sonarqube-db
        component: code-quality
    spec:
      containers:
      - name: postgres
        image: postgres:15.5-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5432
          name: postgres
          protocol: TCP
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: sonarqube-db-credentials
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sonarqube-db-credentials
              key: password
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: sonarqube-db-credentials
              key: database
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U sonar -h 127.0.0.1 -p 5432
          initialDelaySeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U sonar -h 127.0.0.1 -p 5432
          initialDelaySeconds: 5
          timeoutSeconds: 1
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: sonarqube-db-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: sonarqube-db-service
  namespace: expense-tracker
  labels:
    app: sonarqube-db
    component: code-quality
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgres
  selector:
    app: sonarqube-db
    component: code-quality
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sonarqube-db-pvc
  namespace: expense-tracker
  labels:
    app: sonarqube-db
    component: code-quality
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: standard
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sonarqube
  namespace: expense-tracker
  labels:
    app: sonarqube
    component: code-quality
    version: v10.3-community
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sonarqube
      component: code-quality
  template:
    metadata:
      labels:
        app: sonarqube
        component: code-quality
        version: v10.3-community
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9000"
        prometheus.io/path: "/api/monitoring/metrics"
    spec:
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      initContainers:
      - name: init-sysctl
        image: busybox:1.36
        imagePullPolicy: IfNotPresent
        securityContext:
          privileged: true
        command: ["sysctl", "-w", "vm.max_map_count=524288"]
      containers:
      - name: sonarqube
        image: sonarqube:10.3-community
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 9000
          name: http
          protocol: TCP
        env:
        - name: SONAR_ES_BOOTSTRAP_CHECKS_DISABLE
          value: "true"
        - name: SONAR_JDBC_URL
          value: "jdbc:postgresql://sonarqube-db-service:5432/sonar"
        - name: SONAR_JDBC_USERNAME
          valueFrom:
            secretKeyRef:
              name: sonarqube-db-credentials
              key: username
        - name: SONAR_JDBC_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sonarqube-db-credentials
              key: password
        volumeMounts:
        - name: sonarqube-data
          mountPath: /opt/sonarqube/data
        - name: sonarqube-logs
          mountPath: /opt/sonarqube/logs
        - name: sonarqube-extensions
          mountPath: /opt/sonarqube/extensions
        - name: sonarqube-config
          mountPath: /opt/sonarqube/conf/sonar.properties
          subPath: sonar.properties
          readOnly: true
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /api/system/status
            port: 9000
          initialDelaySeconds: 60
          timeoutSeconds: 30
        readinessProbe:
          httpGet:
            path: /api/system/status
            port: 9000
          initialDelaySeconds: 30
          timeoutSeconds: 10
      volumes:
      - name: sonarqube-data
        persistentVolumeClaim:
          claimName: sonarqube-data-pvc
      - name: sonarqube-logs
        persistentVolumeClaim:
          claimName: sonarqube-logs-pvc
      - name: sonarqube-extensions
        persistentVolumeClaim:
          claimName: sonarqube-extensions-pvc
      - name: sonarqube-config
        configMap:
          name: sonarqube-config
---
apiVersion: v1
kind: Service
metadata:
  name: sonarqube-service
  namespace: expense-tracker
  labels:
    app: sonarqube
    component: code-quality
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9000"
    prometheus.io/path: "/api/monitoring/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 9000
    targetPort: 9000
    protocol: TCP
    name: http
  selector:
    app: sonarqube
    component: code-quality
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sonarqube-data-pvc
  namespace: expense-tracker
  labels:
    app: sonarqube
    component: code-quality
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sonarqube-logs-pvc
  namespace: expense-tracker
  labels:
    app: sonarqube
    component: code-quality
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
  storageClassName: standard
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sonarqube-extensions-pvc
  namespace: expense-tracker
  labels:
    app: sonarqube
    component: code-quality
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: standard 