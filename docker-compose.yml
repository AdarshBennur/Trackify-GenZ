services:
  # MongoDB Database
  mongo:
    image: mongo:7.0
    container_name: expense-tracker-db
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: expenseDB
    volumes:
      - mongo_data:/data/db
      - mongo_config:/data/configdb
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - expense-tracker-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Backend API Server
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: expense-tracker-api
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGO_URI: mongodb://mongo:27017/expenseDB
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production
      CLIENT_URL: http://localhost:3000
      CORS_ORIGIN: http://localhost:3000
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - expense-tracker-network
    volumes:
      - ./server:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React App
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: expense-tracker-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      server:
        condition: service_healthy
    networks:
      - expense-tracker-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  expense-tracker-network:
    driver: bridge
    name: expense-tracker-network

volumes:
  mongo_data:
    driver: local
    name: expense-tracker-mongo-data
  mongo_config:
    driver: local
    name: expense-tracker-mongo-config 