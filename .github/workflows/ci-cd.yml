name: 🚀 CI/CD Pipeline for Expense Tracker

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME_CLIENT: ${{ secrets.DOCKERHUB_USERNAME }}/expense-tracker-client
  IMAGE_NAME_SERVER: ${{ secrets.DOCKERHUB_USERNAME }}/expense-tracker-server

jobs:
  # Code Quality and Security Checks
  code-quality:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            client/package-lock.json
            server/package-lock.json

      - name: 📦 Install dependencies
        run: |
          cd client && npm ci
          cd ../server && npm ci

      - name: 🔍 Run ESLint
        run: |
          cd client && npm run lint --if-present
          cd ../server && npm run lint --if-present

      - name: 🧪 Run tests
        run: |
          cd client && npm test -- --coverage --watchAll=false
          cd ../server && npm test --if-present

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./client/coverage/lcov.info

      - name: 🔒 Run security audit
        run: |
          npm audit --audit-level=high
          cd client && npm audit --audit-level=high
          cd ../server && npm audit --audit-level=high

  # Build and Test Docker Images
  docker-build:
    name: 🐳 Docker Build & Test
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        service: [client, server]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 📝 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME_CLIENT }}
            ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME_SERVER }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗 Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          platforms: linux/amd64,linux/arm64
          target: production
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service == 'client' && env.IMAGE_NAME_CLIENT || env.IMAGE_NAME_SERVER }}:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🧪 Test Docker image
        run: |
          docker run --rm -d --name test-${{ matrix.service }} \
            ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service == 'client' && env.IMAGE_NAME_CLIENT || env.IMAGE_NAME_SERVER }}:${{ github.sha }}
          sleep 10
          docker logs test-${{ matrix.service }}
          docker stop test-${{ matrix.service }}

  # Integration Tests
  integration-tests:
    name: 🧪 Integration Tests
    runs-on: ubuntu-latest
    needs: docker-build
    services:
      mongo:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password123
          MONGO_INITDB_DATABASE: expensetracker_test
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          cd server && npm ci

      - name: 🧪 Run integration tests
        env:
          MONGO_URI: mongodb://admin:password123@localhost:27017/expensetracker_test?authSource=admin
          JWT_SECRET: test-secret-key
          NODE_ENV: test
        run: |
          cd server && npm run test:integration --if-present

  # Security Scanning
  security-scan:
    name: 🔒 Security Scanning
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.expense-tracker.com
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # e.g., deploy to staging server, update staging docker-compose, etc.

  # Deploy to Production
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://expense-tracker.com
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          # e.g., deploy to production server, blue-green deployment, etc.

      - name: 📢 Notify deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Performance Testing
  performance-test:
    name: ⚡ Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ⚡ Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v9
        with:
          configPath: './.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true 