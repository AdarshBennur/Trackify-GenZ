name: 🚀 CI/CD Pipeline for Expense Tracker

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Add proper permissions for security scanning
permissions:
  contents: read
  security-events: write
  actions: read

env:
  REGISTRY: docker.io
  DOCKERHUB_REPO: adarsh3107/trackify-genz

jobs:
  # Code Quality and Security Checks
  code-quality:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Install client dependencies
        run: cd client && npm ci --no-optional
        continue-on-error: true

      - name: 📦 Install server dependencies
        run: cd server && npm ci --no-optional
        continue-on-error: true

      - name: 🔍 Run ESLint
        continue-on-error: true
        run: |
          cd client && npm run lint --if-present || echo "⚠️ No lint script found in client"
          cd ../server && npm run lint --if-present || echo "⚠️ No lint script found in server"

      - name: 🧪 Run tests
        continue-on-error: true
        run: |
          cd client && (npm test -- --coverage --watchAll=false --passWithNoTests || echo "⚠️ Client tests failed or not found")
          cd ../server && (npm test --if-present || echo "⚠️ No test script found in server")

      - name: 🔒 Run security audit
        continue-on-error: true
        run: |
          npm audit --audit-level=critical || echo "⚠️ Security audit found issues (continuing)"
          cd client && npm audit --audit-level=critical || echo "⚠️ Client security audit found issues (continuing)"
          cd ../server && npm audit --audit-level=critical || echo "⚠️ Server security audit found issues (continuing)"

  # Build and Test Docker Images
  docker-build:
    name: 🐳 Docker Build & Test
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        service: [client, server]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🏷️ Generate tags
        id: tags
        run: |
          echo "SERVICE_TAG=${{ env.DOCKERHUB_REPO }}-${{ matrix.service }}:${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "LATEST_TAG=${{ env.DOCKERHUB_REPO }}-${{ matrix.service }}:latest" >> $GITHUB_OUTPUT

      - name: 🏗 Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          platforms: linux/amd64,linux/arm64
          target: production
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ steps.tags.outputs.SERVICE_TAG }}
            ${{ steps.tags.outputs.LATEST_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🧪 Test Docker image
        if: github.event_name != 'pull_request'
        run: |
          echo "Testing Docker image: ${{ steps.tags.outputs.SERVICE_TAG }}"
          
          # Start container in detached mode
          CONTAINER_ID=$(docker run --rm -d --name test-${{ matrix.service }} ${{ steps.tags.outputs.SERVICE_TAG }})
          echo "Started container: $CONTAINER_ID"
          
          # Wait a bit for container to start
          sleep 15
          
          # Check if container is still running
          if docker ps | grep -q test-${{ matrix.service }}; then
            echo "✅ Container is running successfully"
            docker logs test-${{ matrix.service }}
            docker stop test-${{ matrix.service }} || echo "Container already stopped"
          else
            echo "ℹ️ Container exited (this might be expected for some builds)"
            docker logs test-${{ matrix.service }} || echo "No logs available"
          fi

  # Integration Tests
  integration-tests:
    name: 🧪 Integration Tests
    runs-on: ubuntu-latest
    needs: docker-build
    services:
      mongo:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password123
          MONGO_INITDB_DATABASE: expensetracker_test
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          cd server && npm ci

      - name: 🧪 Run integration tests
        env:
          MONGO_URI: mongodb://admin:password123@localhost:27017/expensetracker_test?authSource=admin
          JWT_SECRET: test-secret-key
          NODE_ENV: test
        run: |
          cd server && npm run test:integration --if-present

  # Security Scanning - Simplified to prevent hanging
  security-scan:
    name: 🔒 Security Scanning
    runs-on: ubuntu-latest
    needs: docker-build
    continue-on-error: true
    timeout-minutes: 10  # Add timeout to prevent 15+ minute hangs
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run quick vulnerability scan
        continue-on-error: true
        run: |
          echo "🔍 Running quick security scan..."
          # Quick npm audit
          npm audit --audit-level=high --json || echo "⚠️ Some vulnerabilities found"
          
          # Quick dependency check
          cd client && npm audit --audit-level=high --json || echo "⚠️ Client vulnerabilities found"
          cd ../server && npm audit --audit-level=high --json || echo "⚠️ Server vulnerabilities found"
          
          echo "✅ Security scan completed"

      # Optional: Keep Trivy but with timeout and simpler config
      - name: 🔍 Run Trivy scan (optional)
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        timeout-minutes: 5
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          severity: 'CRITICAL,HIGH'

  # Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.expense-tracker.com
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # e.g., deploy to staging server, update staging docker-compose, etc.

  # Deploy to Production
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://expense-tracker.com
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          # e.g., deploy to production server, blue-green deployment, etc.

      - name: 📢 Notify deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Performance Testing
  performance-test:
    name: ⚡ Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ⚡ Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v9
        with:
          configPath: './.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true 