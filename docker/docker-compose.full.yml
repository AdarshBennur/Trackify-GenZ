# Docker Compose for Complete Expense Tracker DevOps Environment
# Includes: Client, Server, Prometheus, Grafana, Vault, SonarQube
# Optimized for Docker Desktop with all ports properly configured

version: '3.8'

services:
  # ================================
  # APPLICATION SERVICES
  # ================================
  
  # React Frontend Service
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-development}
    container_name: trackify-client
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:5001/api}
      REACT_APP_ENV: ${NODE_ENV:-development}
      HOST: 0.0.0.0
    ports:
      - "${CLIENT_PORT:-3000}:3000"
    volumes:
      - ./client:/app
      - /app/node_modules
    networks:
      - trackify-network
    depends_on:
      server:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 60s
    labels:
      - "com.docker.compose.service=client"
      - "trackify.service=frontend"
      - "trackify.url=http://localhost:${CLIENT_PORT:-3000}"

  # Node.js Backend API Service  
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-development}
    container_name: trackify-server
    restart: unless-stopped
    env_file:
      - .env
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${SERVER_PORT:-5001}
      MONGO_URI: ${MONGO_URI}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRE: ${JWT_EXPIRE:-30d}
      JWT_COOKIE_EXPIRE: ${JWT_COOKIE_EXPIRE:-30}
      CLIENT_URL: ${CLIENT_URL:-http://localhost:3000}
      DEBUG_AUTH: ${DEBUG_AUTH:-true}
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS:-10}
      # Vault configuration
      VAULT_ADDR: ${VAULT_ADDR:-http://vault:8200}
      VAULT_TOKEN: ${VAULT_TOKEN:-myroot}
    ports:
      - "${SERVER_PORT:-5001}:5001"
    volumes:
      - ./server:/app
      - /app/node_modules
    networks:
      - trackify-network
    depends_on:
      vault:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5001/api/health || exit 1"]
      interval: 20s
      timeout: 10s
      retries: 8
      start_period: 90s
    labels:
      - "com.docker.compose.service=server"
      - "trackify.service=backend"
      - "trackify.url=http://localhost:${SERVER_PORT:-5001}/api"

  # ================================
  # MONITORING SERVICES
  # ================================

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: trackify-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - trackify-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.docker.compose.service=prometheus"
      - "trackify.service=monitoring"
      - "trackify.url=http://localhost:9090"

  # Grafana Visualization
  grafana:
    image: grafana/grafana:10.2.2
    container_name: trackify-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"  # Avoid conflict with client on 3000
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - trackify-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.docker.compose.service=grafana"
      - "trackify.service=visualization"
      - "trackify.url=http://localhost:3001"

  # Node Exporter for System Metrics
  node-exporter:
    image: prom/node-exporter:v1.7.0
    container_name: trackify-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - trackify-network
    labels:
      - "com.docker.compose.service=node-exporter"
      - "trackify.service=metrics"

  # ================================
  # SECURITY SERVICES
  # ================================

  # HashiCorp Vault
  vault:
    image: hashicorp/vault:1.15.4
    container_name: trackify-vault
    restart: unless-stopped
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_TOKEN:-myroot}
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
      VAULT_ADDR: http://0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    volumes:
      - vault_data:/vault/data
      - ./vault/config:/vault/config:ro
      - ./vault/policies:/vault/policies:ro
    command: ["vault", "server", "-dev", "-dev-listen-address=0.0.0.0:8200"]
    networks:
      - trackify-network
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.docker.compose.service=vault"
      - "trackify.service=secrets"
      - "trackify.url=http://localhost:8200"

  # Vault Init Helper
  vault-init:
    image: hashicorp/vault:1.15.4
    container_name: trackify-vault-init
    restart: "no"
    environment:
      VAULT_ADDR: http://vault:8200
      VAULT_TOKEN: ${VAULT_TOKEN:-myroot}
    volumes:
      - ./vault/scripts:/vault/scripts:ro
    networks:
      - trackify-network
    depends_on:
      vault:
        condition: service_healthy
    command: ["/vault/scripts/init-vault.sh"]
    labels:
      - "com.docker.compose.service=vault-init"

  # ================================
  # CODE QUALITY SERVICES
  # ================================

  # SonarQube Code Analysis
  sonarqube:
    image: sonarqube:10.3-community
    container_name: trackify-sonarqube
    restart: unless-stopped
    ports:
      - "9000:9000"
    environment:
      SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: true
      SONAR_JDBC_URL: jdbc:postgresql://sonarqube-db:5432/sonar
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar123
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_extensions:/opt/sonarqube/extensions
    networks:
      - trackify-network
    depends_on:
      sonarqube-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/api/system/status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    labels:
      - "com.docker.compose.service=sonarqube"
      - "trackify.service=code-quality"
      - "trackify.url=http://localhost:9000"

  # PostgreSQL for SonarQube
  sonarqube-db:
    image: postgres:15.5-alpine
    container_name: trackify-sonarqube-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar123
      POSTGRES_DB: sonar
    volumes:
      - sonar_postgres_data:/var/lib/postgresql/data
    networks:
      - trackify-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sonar"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - "com.docker.compose.service=sonarqube-db"

  # ================================
  # SUPPORTING SERVICES
  # ================================

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:1.25.3-alpine
    container_name: trackify-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    networks:
      - trackify-network
    depends_on:
      client:
        condition: service_healthy
      server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "com.docker.compose.service=nginx"
      - "trackify.service=proxy"
      - "trackify.url=http://localhost"

# ================================
# NETWORKS
# ================================
networks:
  trackify-network:
    driver: bridge
    name: trackify-devops-network

# ================================
# VOLUMES
# ================================
volumes:
  # MongoDB data (for future use)
  mongo_data:
    driver: local
    name: trackify-mongo-data
  
  # Monitoring volumes
  prometheus_data:
    driver: local
    name: trackify-prometheus-data
  grafana_data:
    driver: local
    name: trackify-grafana-data
    
  # Security volumes
  vault_data:
    driver: local
    name: trackify-vault-data
    
  # Code quality volumes
  sonarqube_data:
    driver: local
    name: trackify-sonarqube-data
  sonarqube_logs:
    driver: local
    name: trackify-sonarqube-logs
  sonarqube_extensions:
    driver: local
    name: trackify-sonarqube-extensions
  sonar_postgres_data:
    driver: local
    name: trackify-sonar-postgres-data 